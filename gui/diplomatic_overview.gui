# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types diplomatic_panel
{
	type diplomatic_overview_panel = default_block_window {
		name = "diplomatic_overview_panel"
		enabled = yes
		datacontext = "[AccessPlayer]" # using AccessPlayer instead of GetPlayer here because sorting subjects requires a non-const country
		
		blockoverride "animation_state_block" {
			state = {
				name = _show
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/diplomacy"
				}
			}

			state = {
				name = _hide
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/diplomacy_stop"
				}
			}
		}
		
		blockoverride "window_header_name"
		{
			text = "DIPLOMATIC_OVERVIEW_TITLE"
		}

		blockoverride "fixed_top"
		{
			# Power Rank
			top_illu = {
				datacontext = "[GetPlayer]"

				blockoverride "illu" {
					texture = "gfx/interface/illustrations/top_illus/top_illu_diplomacy.dds"
				}
				
				flowcontainer = {
					parentanchor = center
					
					rank_badge = {}
					
					textbox = {
						text = "[Country.GetRank|v]"
						tooltip = "[Country.GetRankTooltip]"
						autoresize = yes
						margin = { 10 0 }
						align = nobaseline
						parentanchor = vcenter
						using = fontsize_xxl
					}
				}

				map_modes_minimized = {
					parentanchor = right|vcenter
					position = { -10 0 }

					blockoverride "first_button_click" {
						onclick = "[DiplomaticOverviewPanel.ShowAttitude]"
					}
					blockoverride "first_button_selected" {
						visible = "[DiplomaticOverviewPanel.IsShowingAttitude]"
					}
					blockoverride "first_button_not_selected" {
						visible = "[Not(DiplomaticOverviewPanel.IsShowingAttitude)]"
					}
					blockoverride "first_button_icon" {
						texture = "gfx/interface/icons/map_mode_icons/attitude.dds"
					}
					blockoverride "first_button_text" {
						text = "MAP_MODE_ATTITUDE_COUNTRY"
					}
					blockoverride "second_button_click" {
						onclick = "[DiplomaticOverviewPanel.ShowRelations]"
					}
					blockoverride "second_button_selected" {
						visible = "[DiplomaticOverviewPanel.IsShowingRelations]"
					}
					blockoverride "second_button_not_selected" {
						visible = "[Not(DiplomaticOverviewPanel.IsShowingRelations)]"
					}
					blockoverride "second_button_icon" {
						texture = "gfx/interface/icons/map_mode_icons/relations.dds"
					}
					blockoverride "second_button_text" {
						text = "MAP_MODE_RELATIONS_COUNTRY"
					}

					blockoverride "third_button" {}
					blockoverride "fourth_button" {}
				}
			}

			### TABS
			tab_buttons = {
				# Diplomacy overview
				blockoverride "first_button" {
					text = "OVERVIEW"
				}
				blockoverride "first_button_tooltip" {
					tooltip = "OVERVIEW"
				}
				blockoverride "first_button_click" {
					onclick = "[InformationPanel.SelectTab('default')]"
				}
				blockoverride "first_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('default')]"
				}
				blockoverride "first_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('default') )]"
				}
				blockoverride "first_button_selected" {
					text = "OVERVIEW"
				}	

				# Subjects
				blockoverride "second_button" {
					text = "concept_subjects"
				}
				blockoverride "second_button_tooltip" {
					tooltip = "concept_subjects"
				}
				blockoverride "second_button_click" {
					onclick = "[InformationPanel.SelectTab('subjects')]"
				}
				blockoverride "second_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('subjects')]"
				}
				blockoverride "second_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('subjects') )]"
				}
				blockoverride "second_button_selected" {
					text = "concept_subjects"
				}
				blockoverride "second_button_name" {
					name = "tutorial_highlight_diplomacy_subjects_tab"
				}

				# Release subjects
				blockoverride "third_button" {
					text = "RELEASE_SUBJECT"
				}
				blockoverride "third_button_tooltip" {
					tooltip = "RELEASE_SUBJECT"
				}
				blockoverride "third_button_click" {
					onclick = "[InformationPanel.SelectTab('release_subject')]"
				}
				blockoverride "third_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('release_subject')]"
				}
				blockoverride "third_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('release_subject') )]"
				}
				blockoverride "third_button_selected" {
					text = "RELEASE_SUBJECT"
				}

				# Countries
				blockoverride "fourth_button" {
					text = "concept_countries"
				}
				blockoverride "fourth_button_tooltip" {
					tooltip = "concept_countries"
				}
				blockoverride "fourth_button_click" {
					onclick = "[InformationPanel.SelectTab('country_browser')]"
				}
				blockoverride "fourth_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('country_browser')]"
				}
				blockoverride "fourth_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('country_browser') )]"
				}
				blockoverride "fourth_button_selected" {
					text = "concept_countries"
				}
			}
		}

		blockoverride "scrollarea_content"
		{
			container = {
				diplomacy_overview_tab_content = {
					visible = "[InformationPanel.IsTabSelected('default')]"
				}

				subjects_tab_content = {
					visible = "[InformationPanel.IsTabSelected('subjects')]"
				}

				release_subject_tab_content = {
					visible = "[InformationPanel.IsTabSelected('release_subject')]"
				}

				country_browser_tab_content = {
					visible = "[InformationPanel.IsTabSelected('country_browser')]"
				}
			}
		}

		blockoverride "fixed_bottom"
		{
			flowcontainer = {
				direction = vertical
				visible = "[InformationPanel.IsTabSelected('default')]"

				divider_clean = {
					size = { @panel_width_plus_14 4 }
				}

				background = {
					using = dark_area
				}

				widget = {
					size = { 10 10 }
				}

				button = {
					parentanchor = hcenter
					using = default_button
					text = "DECLARE_INTEREST_BUTTON"
					size = { @panel_width 50 }
					using = fontsize_large
					onclick = "[GetLensToolbar.ActivateOption('declare_interest')]"
					tooltip = "declare_interest_tooltip"
				}

				widget = {
					size = { 5 5 }
				}

				button = {
					name = "tutorial_highlight_country_browser"
					parentanchor = hcenter
					using = default_button
					text = "OPEN_DIPLOMATIC_BROWSER"
					size = { @panel_width 50 }
					using = fontsize_large
					onclick = "[InformationPanelBar.OpenPanel('countries')]"
				}

				widget = {
					size = { 10 10 }
				}
			}
		}

		blockoverride "bottom_spacing" {}
	}

	type diplomacy_overview_tab_content = flowcontainer {
		direction = vertical
		using = default_list_position
		using = default_content_fade

		overlord = {
			visible = "[GetPlayer.GetSubjectType.IsValid]"

			blockoverride "liberty_desire_overlord_datacontext" {
				datacontext = "[AccessPlayer.AccessOverlord]"
			}
		}

		diplomatic_info = {
			datacontext = "[AccessPlayer]"
		}

		default_header = {
			using = default_list_position
			blockoverride "text" {
				text = "concept_interests"
			}
		}

		flowcontainer = {
			parentanchor = hcenter
			visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessInterests))]"
			
			sort_button = {
				size = { 375 30 }
				text = "INTEREST_IN"
			}

			sort_button = {
				size = { 155 30 }
				tooltip = PROGRESS
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_progress.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}
		}

		flowcontainer = {
			using = default_list_position
			datamodel = "[AccessPlayer.AccessInterests]"
			visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessInterests))]"
			direction = vertical

			item = {
				flowcontainer = {
					datacontext = "[Interest.GetStrategicRegion]"
					tooltip = "INTEREST_MARKER_TOOLTIP"
					using = unclickable_listentry
					margin_bottom = 10 
					spacing = 10
					onmousehierarchyenter = "[AccessHighlightManager.HighlightStrategicRegion(StrategicRegion.Self)]"
					onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
					alwaystransparent = no
					
					# Needs to be in a widget to avoid conflict of aligments
					widget = {
						size = { 370 30 }
						parentanchor = vcenter
						
						textbox = {
							visible = "[Interest.IsActive]"
							text = "[StrategicRegion.GetName]"
							autoresize = yes
							minimumsize = { 370 -1 }
							parentanchor = vcenter
						}
						textbox = {
							visible = "[Not(Interest.IsActive)]"
							text = "[StrategicRegion.GetName]"
							autoresize = yes
							minimumsize = { 370 -1 }
							parentanchor = vcenter
							alpha = 0.5
						}
					}	

					widget = {
						size = { 150 30 }
						parentanchor = vcenter
						
						container = {
							visible = "[Interest.ShouldShowProgressBar]"
							parentanchor = center
							
							bad_progressbar_horizontal = {
								size = { 120 16 }
								visible = "[Interest.IsActive]"
								parentanchor = center
								blockoverride "values" {
									value = "[Interest.GetProgress]"
									min = 0
									max = 1
								}

								textbox = {
									text = "[Interest.GetProgress|%0]"
									parentanchor = center
									autoresize = yes
									align = nobaseline	
								}
							}

							default_progressbar_horizontal = {
								size = { 120 16 }
								visible = "[Not(Interest.IsActive)]"
								parentanchor = center					
								blockoverride "values" {
									value = "[Interest.GetProgress]"
									min = 0
									max = 1
								}

								textbox = {
									text = "[Interest.GetProgress|%0]"
									parentanchor = center
									autoresize = yes
									align = nobaseline	
								}
							}
						}
					}
				}
			}
		}
	}

	type subjects_tab_content = flowcontainer {
		minimumsize = { @panel_width_plus_20 -1 }
		maximumsize = { @panel_width_plus_20 -1 }
		using = default_content_fade
		direction = vertical
		margin_top = 10

		flowcontainer = {
			name = "tutorial_highlight_subject_types_table"
			direction = vertical

			section_header_button = {
				using = default_fade_in_out
				parentanchor = hcenter

				block "section_header_size" {
					size = { @panel_width 40 }
				}

				blockoverride "arrow_position" {
					position = { 2 0 }
					parentanchor = vcenter
				}

				blockoverride "left_textbox_margin_left" {
					margin_left = 30
				}

				blockoverride "left_text" {
					text = "SUBJECT_TYPES_VISUALIZATION"
				}
				
				blockoverride "onclick" {
					onclick = "[GetVariableSystem.Toggle('subject_types_visualization')]"
				}

				blockoverride "onclick_showmore" {
					visible = "[Not(GetVariableSystem.Exists('subject_types_visualization'))]"
				}

				blockoverride "onclick_showless" {
					visible = "[GetVariableSystem.Exists('subject_types_visualization')]"
				}
			}

			### SUBJECT TYPES - COLUMN HEADERS
			widget = {
				visible = "[GetVariableSystem.Exists('subject_types_visualization')]"
				size = { @panel_width 45 }
				parentanchor = hcenter

				hbox = {
					margin = { 10 0 }

					textbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 5
						align = nobaseline
						using = fontsize_large
						elide = right
						fontsize_min = 12
						text = "[concept_subject_type]"
					}

					### AUTONOMOUS (Can start or join Diplomatic Plays)
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 2
						tooltip = "SUBJECT_TYPE_AUTONOMOUS_HEADER_TOOLTIP"
						using = tooltip_ne

						icon = {
							size = { 30 30 }
							texture = "gfx/interface/icons/lens_toolbar_icons/lens_tabs/icon_diplomatic_lens_diplomatic_plays.dds"
						}
					}

					### NEXT LESS AUTONOMOUS SUBJECT TYPE
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 2
						tooltip = "SUBJECT_TYPE_DECREASED_AUTONOMY_HEADER_TOOLTIP"
						using = tooltip_ne

						icon = {
							size = { 30 30 }
							texture = "gfx/interface/buttons/button_icons/lock.dds"
						}
					}

					### NEXT MORE AUTONOMOUS SUBJECT TYPE
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 2
						tooltip = "SUBJECT_TYPE_INCREASED_AUTONOMY_HEADER_TOOLTIP"
						using = tooltip_ne

						icon = {
							size = { 30 30 }
							texture = "gfx/interface/buttons/button_icons/unlock.dds"
						}
					}

					### UNIFIES (Counts in unification)
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 2
						tooltip = "SUBJECT_TYPE_UNIFICATION_HEADER_TOOLTIP"
						using = tooltip_ne

						icon = {
							size = { 30 30 }
							texture = "gfx/interface/icons/ai_strategy_icons/unification.dds"
						}
					}

					### INCOME TRANSFER
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 2
						tooltip = "SUBJECT_TYPE_INCOME_TRANSFER_HEADER_TOOLTIP"
						using = tooltip_ne

						icon = {
							size = { 30 30 }
							texture = "gfx/interface/icons/generic_icons/money.dds"
						}
					}

					### CONVOY CONTRIBUTION
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 2
						tooltip = "SUBJECT_TYPE_CONVOY_CONTRIBUTION_HEADER_TOOLTIP"
						using = tooltip_ne

						icon = {
							size = { 30 30 }
							texture = "gfx/interface/icons/generic_icons/convoys.dds"
						}
					}

					### OVERLORD TYPE
					textbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 4
						align = hcenter|nobaseline
						using = fontsize_large
						elide = right
						fontsize_min = 12
						tooltip = "SUBJECT_TYPE_OVERLORD_TYPE_HEADER_TOOLTIP"
						using = tooltip_ne
						text = "OVERLORD_TYPE"
					}
				}

				divider_clean = {
					parentanchor = bottom
				}

			}

			### SUBJECT TYPES - COLUMN VALUES
			fixedgridbox = {
				visible = "[GetVariableSystem.Exists('subject_types_visualization')]"
				parentanchor = hcenter
				addcolumn = 540
				addrow = 40
				datamodel = "[GetSubjectTypes]"

				background = {
					using = dark_area
				}

				item = {
					widget = {
						size = { @panel_width 40 }

						divider_clean = {
							parentanchor = bottom
						}

						background = {
							visible = "[IsEven_int32(PdxGuiWidget.GetIndexInDataModel)]"
							using = dark_area
						}

						hbox = {
							margin = { 10 0 }

							### VALUE - SUBJECT TYPE NAME & ICON
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								layoutstretchfactor_horizontal = 5
								spacing = 5

								icon = {
									size = { 30 30 }
									texture = "[SubjectType.GetTexture]"
								}

								textbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									align = nobaseline
									elide = right
									fontsize_min = 12
									text = "[SubjectType.GetNameNoIcon]"
								}
							}


							### VALUE - AUTONOMOUS (Can start or join Diplomatic Plays)
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								layoutstretchfactor_horizontal = 2

								icon = {
									visible = "[SubjectType.CanStartOwnDiplomaticPlays]"
									size = { 30 30 }
									tooltip = "SUBJECT_TYPE_AUTONOMOUS_TOOLTIP"
									using = tooltip_se
									texture = "gfx/interface/icons/generic_icons/green_checkmark.dds"
								}

								icon = {
									visible = "[Not(SubjectType.CanStartOwnDiplomaticPlays)]"
									size = { 30 30 }
									tooltip = "SUBJECT_TYPE_AUTONOMOUS_NOT_TOOLTIP"
									using = tooltip_se
									texture = "gfx/interface/icons/generic_icons/red_cross.dds"
								}
							}

							### VALUE - NEXT LESS AUTONOMOUS SUBJECT TYPE
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								layoutstretchfactor_horizontal = 2

								icon = {
									visible = "[Not(SubjectType.GetLowerAutonomySubjectType(GetPlayer.Self).IsValid)]"
									size = { 30 30 }
									tooltip = "SUBJECT_TYPE_ANNEX_TOOLTIP"
									using = tooltip_se
									texture = "gfx/interface/icons/war_goals/annex_country.dds"
								}

								icon = {
									visible = "[SubjectType.GetLowerAutonomySubjectType(GetPlayer.Self).IsValid]"
									size = { 30 30 }
									tooltip = "SUBJECT_TYPE_DECREASED_AUTONOMY_TOOLTIP"
									using = tooltip_se
									texture = "[SubjectType.GetLowerAutonomySubjectType(GetPlayer.Self).GetTexture]"
								}
							}

							### VALUE - NEXT MORE AUTONOMOUS SUBJECT TYPE
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								layoutstretchfactor_horizontal = 2

								icon = {
									visible = "[Not(SubjectType.GetHigherAutonomySubjectType(GetPlayer.Self).IsValid)]"
									size = { 30 30 }
									tooltip = "SUBJECT_TYPE_INDEPENDENCE_TOOLTIP"
									using = tooltip_se
									texture = "gfx/interface/icons/war_goals/independence.dds"
								}

								icon = {
									visible = "[SubjectType.GetHigherAutonomySubjectType(GetPlayer.Self).IsValid]"
									size = { 30 30 }
									tooltip = "SUBJECT_TYPE_INCREASED_AUTONOMY_TOOLTIP"
									using = tooltip_se
									texture = "[SubjectType.GetHigherAutonomySubjectType(GetPlayer.Self).GetTexture]"
								}
							}

							### VALUE - UNIFIES (Counts in unification)
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								layoutstretchfactor_horizontal = 2

								icon = {
									visible = "[SubjectType.ShouldAnnexOnCountryFormation]"
									size = { 30 30 }
									tooltip = "SUBJECT_TYPE_UNIFIES_TOOLTIP"
									using = tooltip_se
									texture = "gfx/interface/icons/generic_icons/green_checkmark.dds"
								}

								icon = {
									visible = "[Not(SubjectType.ShouldAnnexOnCountryFormation)]"
									size = { 30 30 }
									tooltip = "SUBJECT_TYPE_UNIFIES_NOT_TOOLTIP"
									using = tooltip_se
									texture = "gfx/interface/icons/generic_icons/red_cross.dds"
								}
							}

							### VALUE - INCOME TRANSFER
							textbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								layoutstretchfactor_horizontal = 2
								align = hcenter|nobaseline
								elide = right
								fontsize_min = 12
								alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(SubjectType.GetIncomeTransfer, '(CFixedPoint)0'))]"
								tooltip = "SUBJECT_TYPE_INCOME_TRANSFER_TOOLTIP"
								using = tooltip_se
								raw_text = "[SubjectType.GetIncomeTransfer|v%0]"

							}

							### VALUE - CONVOY CONTRIBUTION
							textbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								layoutstretchfactor_horizontal = 2
								align = hcenter|nobaseline
								elide = right
								fontsize_min = 12
								alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(SubjectType.GetDiplomaticActionType.GetSecondModifier.GetValueFor('country_convoy_contribution_to_market_owner_add'), '(CFixedPoint)0'))]"
								tooltip = "SUBJECT_TYPE_CONVOY_CONTRIBUTION_TOOLTIP"
								using = tooltip_se
								raw_text = "[SubjectType.GetDiplomaticActionType.GetSecondModifier.GetValueFor('country_convoy_contribution_to_market_owner_add')|v%0]"
							}

							### VALUE - OVERLORD TYPE
							textbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								layoutstretchfactor_horizontal = 4
								align = hcenter|nobaseline
								elide = right
								fontsize_min = 12
								text = "OVERLORD_TYPE_VALUE"
							}
						}
					}
				}
			}
		}

		widget = {
			size = { 10 10 }
		}
		
		flowcontainer = {
			parentanchor = hcenter
			direction = vertical

			default_header = {
				blockoverride = "text" {
					text = "concept_subjects"
				}
			}

			flowcontainer = {
				minimumsize = { @panel_width_plus_14 -1 }
				parentanchor = hcenter
				spacing = 10
				margin_bottom = 10

				background = {
					using = dark_area
				}

				textbox = {
					parentanchor = vcenter
					multiline = yes
					size = { 95 60 }
					text = "GROUP"
					align = right|nobaseline
					margin_right = 10
					margin_left = 10
				}

				vertical_divider = {}

				flowcontainer = {
					parentanchor = vcenter
					spacing = 5

					filter_button = {
						visible = "[GetVariableSystem.Exists( 'subjects_grouping' )]"
						size = { 208 40 }

						blockoverride "text" {
							text = "NONE"
						}

						blockoverride "onclick" {
							onclick = "[GetVariableSystem.Clear( 'subjects_grouping' )]"
						}
					}

					filter_background_selected = {
						visible = "[Not(GetVariableSystem.Exists( 'subjects_grouping' ))]"
						size = { 208 40 }

						blockoverride "text" {
							text = "NONE"
						}
					}

					filter_button = {
						visible = "[Not(GetVariableSystem.HasValue( 'subjects_grouping', 'subject_type_grouping' ))]"
						size = { 208 40 }

						blockoverride "text" {
							text = "BY_SUBJECT_TYPE"
						}

						blockoverride "onclick" {
							onclick = "[GetVariableSystem.Set( 'subjects_grouping', 'subject_type_grouping' )]"
						}
					}

					filter_background_selected = {
						visible = "[GetVariableSystem.HasValue( 'subjects_grouping', 'subject_type_grouping' )]"
						size = { 208 40 }

						blockoverride "text" {
							text = "BY_SUBJECT_TYPE"
						}
					}
				}
			}

			flowcontainer = {
				minimumsize = { @panel_width -1 }
				parentanchor = hcenter

				sort_button = {
					size = { 150 30 }
					text = "NAME"
					tooltip = "SUBJECT_COUNTRY_NAME_HEADER_TOOLTIP"
					onclick = "[Country.SortSubjects('name')]"
				}

				sort_button = {
					size = { 250 30 }
					text = "concept_liberty_desire"
					tooltip = "SUBJECT_LIBERTY_DESIRE_HEADER_TOOLTIP"
					onclick = "[Country.SortSubjects('liberty_desire')]"
				}

				sort_button = {
					size = { 150 30 }
					text = "concept_rank"
					tooltip = "SUBJECT_RANK_HEADER_TOOLTIP"
					onclick = "[Country.SortSubjects('rank')]"
				}
			}

			empty_state = {
				blockoverride "visible" {
					visible = "[IsDataModelEmpty(AccessPlayer.GetSubjects)]"
				}
				blockoverride "text" {
					text = "NO_SUBJECTS"
				}
			}

			### SUBJECTS - NO GROUPING
			subject_list = {
				visible = "[Not(GetVariableSystem.HasValue( 'subjects_grouping', 'subject_type_grouping' ))]"
				spacing = 15
			}

			### SUBJECTS - GROUPED BY SUBJECT TYPE
			flowcontainer = {
				visible = "[GetVariableSystem.HasValue( 'subjects_grouping', 'subject_type_grouping' )]"
				parentanchor = hcenter
				direction = vertical
				datamodel = "[GetSubjectTypes]"

				item = {
					flowcontainer = {
						visible = "[Not(IsDataModelEmpty(AccessPlayer.GetSubjectsOfType(SubjectType.Self)))]"
						parentanchor = hcenter
						direction = vertical

						section_header_button = {

							blockoverride "left_text" {
								text = "[SubjectType.GetName]"
								fontsize_min = 12
								elide = right
							}

							blockoverride "right_text" {
								section_header_right_text = {
									raw_text = "#v [GetDataModelSize(AccessPlayer.GetSubjectsOfType(SubjectType.Self))]#!"
								}
							}

							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle( Concatenate('show_diplomatic_pacts_', SubjectType.GetKey) )]"
							}
							
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists( Concatenate('show_diplomatic_pacts_', SubjectType.GetKey) ))]"
							}

							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists( Concatenate('show_diplomatic_pacts_', SubjectType.GetKey) )]"
							}
						}

						subject_list = {
							visible = "[GetVariableSystem.Exists( Concatenate('show_diplomatic_pacts_', SubjectType.GetKey) )]"

							blockoverride "datamodel" {
								datamodel = "[AccessPlayer.GetSubjectsOfType(SubjectType.Self)]"
							}
						}

						empty_state = {
							blockoverride "visible" {
								visible = "[And(IsDataModelEmpty(AccessPlayer.GetSubjectsOfType(SubjectType.Self)), GetVariableSystem.Exists( Concatenate('show_diplomatic_pacts_', SubjectType.GetKey) ))]"
							}
							blockoverride "text" {
								text = "NO_SUBJECTS_OF_THIS_TYPE"
							}
						}
					}
				}
			}
		}			
	}

	type diplo_actions_button = button_icon_round {
		size = { 40 40 }
		using = tooltip_above

		block "onclick" {
			onclick = "[RightClickMenuManager.ToggleSubjectActions(Country.AccessSelf, PdxGuiWidget.AccessSelf)]"
		}

		block "tooltip" {
			tooltip = "SUBJECT_ACTIONS_BUTTON_TOOLTIP"
		}

		blockoverride "icon"{
			block "icon_texture" {
				texture = "gfx/interface/buttons/button_icons/subject_interaction.dds"
			}
		}

		blockoverride "icon_size" {
			size = { 100% 100% }
		}

		action_selection_number = {
			blockoverride "text" {
				block "available_number_text" {
					text = "[GetDataModelSize(Country.GetAvailableSubjectDiploActions)|+]"
				}
			}
		}
	}

	type subject_list = flowcontainer {
		parentanchor = hcenter
		direction = vertical
		spacing = 5
		margin_top = 3
		
		block "datamodel" {
			datamodel = "[AccessPlayer.GetSubjects]"
		}
	
		item = {
			subject_list_item = {}
		}
	}

	type subject_list_item = flowcontainer {
		direction = vertical
		parentanchor = hcenter
		# The country might still remain in the datamodel for few frames after being removed from the subject list
		visible = "[Country.IsSubject]"

		widget = {
			# NVGM
			# size = { @panel_width_minus_10 140 }
			size = { @panel_width_minus_10 300 }
			# NVGM

			icon = {
				using = dark_area
				using = frame_small_mask
				parentanchor = right
				size = { 240 140 }
				alpha = 0.2
				position = { 0 0 }

				modify_texture = {
					texture = "gfx/interface/masks/fade_horizontal_left.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
				}
			}

			background = {
				texture = "[Country.CalcLibertyDesireLevel.GetBackground]"
				using = frame_small_mask
				alpha = 0.7
			}

			background = {

				texture = "gfx/interface/backgrounds/subject_liberty_desire_frame.dds"
			}

			fancy_flag_ui = {
				size = { 80 60 }
				position = { 10 10 }

				blockoverride "overlay_button_and_bg_glow_position" {
					position = { -9 -4 }
				}

				blockoverride "rank_badge_block" {}
			}

			container = {
				widgetid = "[Concatenate('tutorial_highlight_subject_liberty_desire_bar_', Country.GetIDString)]"
				parentanchor = bottom

				liberty_desire_bar_and_buttons = {
					parentanchor = bottom
					position = { -4 9 }

					blockoverride "subject_type_datacontext" {
						datacontext = "[Country.GetSubjectType]"
					}

					blockoverride "progressbar_type" {
						gold_progressbar_horizontal = {
							size = { 100% 100% }
							visible = "[Not(Or( GreaterThan_CFixedPoint(Abs_CFixedPoint(Country.GetWeeklyLibertyDesireChange), GetDefine('NGUI', 'LIBERTY_DESIRE_TREND_INDICATOR_LIMIT')), GreaterThan_CFixedPoint(Country.GetWeeklyLibertyDesireChange, GetDefine('NGUI', 'LIBERTY_DESIRE_TREND_INDICATOR_LIMIT'))))]"
							blockoverride "background" {}
							blockoverride "frame" {}
							blockoverride "glow_visible" {
								visible = "[LibertyDesireLevel.IsActive( Country.GetLibertyDesireRaw )]"
							}

							blockoverride "values" {
								value = "[LibertyDesireLevel.GetProgress( Country.GetLibertyDesireRaw )]"
								min = 0
								max = 1
							}
						}

						changed_value_decreased_progressbar_horizontal_green = {
							size = { 100% 100% }
							visible = "[GreaterThan_CFixedPoint(Abs_CFixedPoint(Country.GetWeeklyLibertyDesireChange), GetDefine('NGUI', 'LIBERTY_DESIRE_TREND_INDICATOR_LIMIT'))]"

							blockoverride "second_progressbar" {}

							blockoverride "values" {
								min = 0
								max = 1
								value = "[LibertyDesireLevel.GetProgress( Country.GetLibertyDesireRaw )]"
							}

							blockoverride "glow_size" {
								size = { 40 100% }
							}

							blockoverride "arrow_texture_density" {
								texture_density = 10 #use to match height of progressbar
							}
						}

						changed_value_increased_progressbar_horizontal_bad = {
							size = { 100% 100% }
							visible = "[GreaterThan_CFixedPoint(Country.GetWeeklyLibertyDesireChange, GetDefine('NGUI', 'LIBERTY_DESIRE_TREND_INDICATOR_LIMIT'))]"

							blockoverride "second_progressbar" {}

							blockoverride "values" {
								value = "[LibertyDesireLevel.GetProgress( Country.GetLibertyDesireRaw )]"
								min = 0
								max = 1
							}

							blockoverride "glow_size" {
								size = { 40 100% }
							}

							blockoverride "arrow_texture_density" {
								texture_density = 10 #use to match height of progressbar
							}
						}
					}
				}

				flowcontainer = {
					parentanchor = hcenter
					position = { 0 7 }
					spacing = 5
					datacontext = "[Country.CalcLibertyDesireLevel]"
					tooltip = "LIBERTY_DESIRE_LEVEL_ACTIVE_TOOLTIP"
					using = tooltip_se

					textbox = {
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						max_width = 100
						fontsize_min = 12
						elide = right
						raw_text = "#v [LibertyDesireLevel.GetNameNoFormatting]#!"
					}

					textbox = {
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						raw_text = "(#v [Country.GetLibertyDesireRaw|0]#!)"
					}


				}
			}

			# NVGM
			flowcontainer = {
				parentanchor = hcenter
				# direction = vertical
				position = { 35 75 }
				spacing = 5

				flowcontainer = {
					parentanchor = vcenter
					direction = vertical

					textbox = {
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						tooltip = "GDP_TOOLTIP"
						using = GDP_tooltip_with_graph
						raw_text = "#gold GDP #!：@gdp![Country.GetGDP|Dv]"
					}

					textbox = {
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						tooltip = "NVGM_MONEY_CREDIT"
						using = nvgm_money_tooltip_with_graph
						raw_text = "NVGM_BALANCE"
					}

					textbox = {
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						tooltip = "NVGM_DIPLOMATIC_PACTS_EXPENSES_BREAKDOWN"
						using = diplomatic_pacts_expense_tooltip_with_graph
						raw_text = "NVGM_DIPLOMATIC_PACTS_EXPENSES"
					}

					textbox = {
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						tooltip = "NVGM_DIPLOMATIC_PACTS_INCOME_BREAKDOWN"
						using = diplomatic_pacts_income_tooltip_with_graph
						raw_text = "NVGM_DIPLOMATIC_PACTS_INCOME"
					}

					textbox = {
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						tooltip = "NVGM_BUREAUCRACY_TOOLTIP"
						raw_text = "[concept_bureaucracy]：#bold @bur![Country.GetPowerDelta('bureaucracy')|D=+]#!"
					}

					textbox = {
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						tooltip = "NVGM_TECHNOLOGY_PROGRESS"
						raw_text = "[concept_innovation]：@innovation![Country.GetWeeklyInnovation|1v]"
					}

					textbox = {
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						raw_text = "　"
					}
				}
			}

			flowcontainer = {	
				position = { 10 90 }
				spacing = 5

				flowcontainer = {
					parentanchor = vcenter
					direction = vertical

					textbox = {
						autoresize = yes
						align = nobaseline
						tooltip = "LEGITIMACY_LEVEL_ACTIVE_ANY_COUNTRY_TOOLTIP"
						raw_text = "[concept_legitimacy]：[Country.GetGovernmentLegitimacy|le]"
					}
					textbox = {
						autoresize = yes
						align = nobaseline
						tooltip = "POP_TOOLTIP"
						using = population_tooltip_with_graph
						raw_text = "[concept_pop]：[Country.GetTotalPopulation|*2v]"
					}
					textbox = {
						autoresize = yes
						align = nobaseline
						tooltip = "COUNTRY_SOL_ALL"
						raw_text = "NVGM_SOL"
					}
					textbox = {
						autoresize = yes
						align = nobaseline
						tooltip = "PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP"
						raw_text = "[concept_battalion]：@battalions! [Country.GetRegularBattalions|v] + @conscripts![Country.CalcConscriptableBattalions|v]"
						# raw_text = "[concept_battalion]：[Country.GetRegularBattalions|v] + [Country.CalcConscriptableBattalions|v][Country.GetBattalionsRanking]"
					}
					textbox = {
						autoresize = yes
						align = nobaseline
						tooltip = "PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP"
						raw_text = "[concept_flotilla]：@flotillas! #variable [Country.GetWarships|0]#!"
						# raw_text = "[concept_flotilla]：#variable [Country.GetWarships|0]#![Country.GetFlotillasRanking]"
					}
					textbox = {
						tooltip = "NVGM_NUM_CONSTRUCTION_TOOLTIP"
						autoresize = yes
						align = nobaseline
						raw_text = "[concept_construction]#!：@construction!#v [Country.CalcUsedConstruction|0]#!/[Country.CalcBaseConstructionSpeed|0][AddLocalizationIf(Country.IsConstructionPaused, 'CONSTRUCTION_IS_PAUSED')]"
					}
				}
			}
			# NVGM

			flowcontainer = {
				position = { 100 10 }
				spacing = 15

				flowcontainer = {
					parentanchor = vcenter
					direction = vertical

					textbox = {
						minimumsize = { 225 -1 }
						maximumsize = { 225 -1 }
						autoresize = yes
						align = nobaseline
						elide = right
						fontsize_min = 12
						using = fontsize_large
						raw_text = "[Country.GetNameNoFlag]"
					}

					textbox = {
						autoresize = yes
						align = nobaseline
						raw_text = "[Country.GetDefinition.GetTier]"
					}

					textbox = {
						autoresize = yes
						align = nobaseline
						raw_text = "[Country.GetSubjectType.GetName]"
					}
				}
			}

			### OTHER ACTIVE PACTS WITH THIS SUBJECT
			flowcontainer = {
				parentanchor = right|vcenter
				position = { 0 -40 }
				
				dynamicgridbox = {
					parentanchor = vcenter
					# NVGM
					# datamodel_wrap = 3
					datamodel_wrap = 5
					# NVGM
					datamodel = "[AccessPlayer.GetNonSubjectDiplomaticPactsWith(Country.Self)]"

					item = {
						widget = {
							size = { 35 35 }

							icon = {
								parentanchor = center
								size = { 80% 80% }
								datacontext = "[DiplomaticPact.GetDiplomaticActionType]"
								texture = "[DiplomaticActionType.GetTexture]"

								tooltipwidget = {
									FancyTooltip_DiplomaticActionType = {
										blockoverride "text_before_before" {
											visible = "[GreaterThan_CFixedPoint(DiplomaticActionType.GetMaintenanceCost(GetPlayer.Self, Country.Self), '(CFixedPoint)0')]"
											text = "DIPLOMATIC_ACTION_TYPE_COST"
											margin_bottom = 15
										}
									}
								}
							}
						}
					}
				}

				widget = {
					size = { 3 3 }
				}

				vertical_divider = {
					size = { 2 150 }
				}

				widget = {
					size = { 10 10 }
				}

				flowcontainer = {
					parentanchor = vcenter
					direction = vertical
					margin_right = 10

					### SMALLER BUTTONS IF BOTH THE SUBJECT/OVERLORD ACTIONS BUTTON AND THE BLOC MEMBER ACTIONS BUTTON SHOULD BE VISIBLE
					flowcontainer = {
						direction = vertical

						### OVERLORD ACTIONS
						diplo_actions_button = {
							visible = "[Country.IsSubjectOf(GetPlayer.Self)]"
							widgetid = "[Concatenate('tutorial_highlight_overlord_actions_button_', Country.GetIDString)]"

							blockoverride "onclick" {
								onclick = "[RightClickMenuManager.ToggleOverlordActions(Country.AccessSelf, PdxGuiWidget.AccessSelf)]"
							}

							blockoverride "tooltip" {
								tooltip = "OVERLORD_ACTIONS_BUTTON_TOOLTIP"
							}

							blockoverride "icon_texture" {
								texture = "gfx/interface/buttons/button_icons/overlord_interaction.dds"
							}

							blockoverride "available_number_text" {
								text = "[GetDataModelSize(Country.GetAvailableOverlordDiploActions)|+]"
							}
						}

						### SUBJECT ACTIONS
						diplo_actions_button = {
							visible = "[GetPlayer.IsSubjectOf(Country.Self)]"
						}

						### BLOC MEMBER ACTIONS
						diplo_actions_button = {
							visible = "[And(Not(IsDataModelEmpty(Country.GetAllPowerBlocMemberDiploActions)), IsDataModelEmpty(Country.GetAllPowerBlocLeaderDiploActions))]"

							blockoverride "onclick" {
								onclick = "[RightClickMenuManager.ToggleBlocActions(Country.AccessSelf, PdxGuiWidget.AccessSelf)]"
							}

							blockoverride "tooltip" {
								tooltip = "BLOC_ACTIONS_BUTTON_TOOLTIP"
							}

							blockoverride "icon_texture" {
								texture = "gfx/interface/buttons/button_icons/bloc_interaction.dds"
							}

							blockoverride "available_number_text" {
								text = "[GetDataModelSize(Country.GetAvailablePowerBlocMemberDiploActions)|+]"
							}
						}
						
						### BLOC LEADER ACTIONS
						diplo_actions_button = {
							visible = "[Not(IsDataModelEmpty(Country.GetAllPowerBlocLeaderDiploActions))]"

							blockoverride "onclick" {
								onclick = "[RightClickMenuManager.ToggleBlocLeaderActions(Country.AccessSelf, PdxGuiWidget.AccessSelf)]"
							}

							blockoverride "tooltip" {
								tooltip = "BLOC_LEADER_ACTIONS_BUTTON_TOOLTIP"
							}

							blockoverride "icon_texture" {
								texture = "gfx/interface/buttons/button_icons/bloc_interaction.dds"
							}

							blockoverride "available_number_text" {
								text = "[GetDataModelSize(Country.GetAvailablePowerBlocLeaderDiploActions)|+]"
							}
						}						
					}
				}
			}

			rank_badge = {
				size = { 45 45 }
				position = { -15 -15 }

				blockoverride "datacontext " {}

				blockoverride "font_size_under_100_rank" {
					using = fontsize_medium
				}
			}
			
			# NVGM
			flowcontainer = {
				parentanchor = right|bottom
				position = { -10 -68 }
				spacing = 5

				icon = {
					name = construction_icon
					size = { 30 30 }
					texture = "gfx/interface/icons/state_status_icons/has_construction.dds"
				}		
				button_icon_round = {
					datacontext = "[GetScriptedGui('nvgm_give_construction_reset_scriptedgui')]"
					visible = "[GetScriptedGui('nvgm_give_construction_reset_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
					tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
					onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
					size = { 30 30 }
					blockoverride "icon" {
						texture = "gfx/interface/buttons/button_icons/reset.dds"
					}
				}	
				button_icon_round = {
					datacontext = "[GetScriptedGui('nvgm_give_construction_plus_scriptedgui')]"
					visible = "[GetScriptedGui('nvgm_give_construction_plus_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
					tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
					onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
					size = { 30 30 }
					blockoverride "icon" {
						texture = "gfx/interface/buttons/button_icons/plus.dds"
					}
				}	
				button_icon_round = {
					datacontext = "[GetScriptedGui('nvgm_give_construction_check_scriptedgui')]"
					visible = "[GetScriptedGui('nvgm_give_construction_check_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
					tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
					onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
					size = { 30 30 }
					blockoverride "icon" {
						texture = "gfx/interface/buttons/button_icons/check.dds"
					}
				}	
			}
			flowcontainer = {
				parentanchor = right|bottom
				position = { -10 -38 }
				spacing = 5

				### ARMY ICON
				icon = {
					visible = "[MilitaryFormation.IsArmy]"
					size = { 30 30 }
					parentanchor = vcenter
					texture = "gfx/interface/icons/generic_icons/battalions.dds"
				}
				button_icon_round = {
					datacontext = "[GetScriptedGui('nvgm_army_build_up_scriptedgui')]"
					visible = "[GetScriptedGui('nvgm_army_build_up_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
					tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
					onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
					size = { 30 30 }
					blockoverride "icon" {
						texture = "gfx/interface/buttons/button_icons/plus.dds"
					}
				}
				icon = {
					name = bureaucracy_icon
					size = { 30 30 }
					texture = "gfx/interface/icons/topbar/bureaucracy_icon.dds"
				}
				button_icon_round = {
					datacontext = "[GetScriptedGui('nvgm_give_bur_reset_scriptedgui')]"
					visible = "[GetScriptedGui('nvgm_give_bur_reset_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
					tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
					onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
					size = { 30 30 }
					blockoverride "icon" {
						texture = "gfx/interface/buttons/button_icons/reset.dds"
					}
				}
				button_icon_round = {
					datacontext = "[GetScriptedGui('nvgm_give_bur_plus_scriptedgui')]"
					visible = "[GetScriptedGui('nvgm_give_bur_plus_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
					tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
					onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
					size = { 30 30 }
					blockoverride "icon" {
						texture = "gfx/interface/buttons/button_icons/plus.dds"
					}
				}	
				button_icon_round = {
					datacontext = "[GetScriptedGui('nvgm_give_bur_check_scriptedgui')]"
					visible = "[GetScriptedGui('nvgm_give_bur_check_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
					tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
					onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
					size = { 30 30 }
					blockoverride "icon" {
						texture = "gfx/interface/buttons/button_icons/check.dds"
					}
				}	
			}
			flowcontainer = {
				parentanchor = right|bottom
				position = { -10 -8 }
				spacing = 5

				### FLEET ICON
				icon = {
					visible = "[MilitaryFormation.IsFleet]"
					size = { 30 30 }
					parentanchor = vcenter
					texture = "gfx/interface/icons/generic_icons/flotillas.dds"
				}
				button_icon_round = {
					datacontext = "[GetScriptedGui('nvgm_navy_build_up_scriptedgui')]"
					visible = "[GetScriptedGui('nvgm_navy_build_up_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
					tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
					onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
					size = { 30 30 }
					blockoverride "icon" {
						texture = "gfx/interface/buttons/button_icons/plus.dds"
					}
				}	
				icon = {
					name = innovation_icon
					size = { 30 30 }
					texture = "gfx/interface/icons/generic_icons/innovation.dds"
				}		
				button_icon_round = {
					datacontext = "[GetScriptedGui('nvgm_give_innovation_reset_scriptedgui')]"
					visible = "[GetScriptedGui('nvgm_give_innovation_reset_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
					tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
					onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
					size = { 30 30 }
					blockoverride "icon" {
						texture = "gfx/interface/buttons/button_icons/reset.dds"
					}
				}	
				button_icon_round = {
					datacontext = "[GetScriptedGui('nvgm_give_innovation_plus_scriptedgui')]"
					visible = "[GetScriptedGui('nvgm_give_innovation_plus_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
					tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
					onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
					size = { 30 30 }
					blockoverride "icon" {
						texture = "gfx/interface/buttons/button_icons/plus.dds"
					}
				}	
				button_icon_round = {
					datacontext = "[GetScriptedGui('nvgm_give_innovation_check_scriptedgui')]"
					visible = "[GetScriptedGui('nvgm_give_innovation_check_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
					tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
					onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
					size = { 30 30 }
					blockoverride "icon" {
						texture = "gfx/interface/buttons/button_icons/check.dds"
					}
				}	
			}
			# NVGM
		}

		# NVGM
		widget = {
			size = { 5 10 }
		}
		# NVGM

		### IMPOSE LAWS DROPDOWN
		section_header_button = {
			blockoverride "layout" {
				parentanchor = hcenter
				size = { @panel_width_minus_10 38 }
			}

			blockoverride "left_text" {
				raw_text = "IMPOSE_LAWS_IN_SUBJECT"
				fontsize_min = 12
				elide = right
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle( Concatenate('show_laws_', Country.GetIDString) )]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists( Concatenate('show_laws_', Country.GetIDString) ))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists( Concatenate('show_laws_', Country.GetIDString) )]"
			}
		}

		widget = {
			size = { 5 5 }
		}

		flowcontainer = {
			visible = "[GetVariableSystem.Exists( Concatenate('show_laws_', Country.GetIDString) )]"
			parentanchor = hcenter
			direction = horizontal
			spacing = 5

			flowcontainer = {
				direction = vertical
				visible = "[Not(IsDataModelEmpty(Country.AccessActivePowerStructureLaws))]"
				datamodel = "[Country.AccessActivePowerStructureLaws]"
				spacing = 5

				item = {
	              	flowcontainer = {
	              		direction = vertical

				   		country_panel_law_item = {
				   			visible = "[Not(Law.IsBeingEnacted)]"
	                    	enabled = "[GreaterThan_int32(Law.GetGroup.GetNumImposeOptions( Country.Self ), '(int32)0')]"
	                 	}

	                 	country_panel_law_item_is_enacting = {
	                 		visible = "[Law.IsBeingEnacted]"
	                 	}
	              	}
				}
			}

			vertical_divider_full = {}

			flowcontainer = {
				direction = vertical
				visible = "[Not(IsDataModelEmpty(Country.AccessActiveEconomyLaws))]"
				datamodel = "[Country.AccessActiveEconomyLaws]"
				spacing = 5

				item = {
	              	flowcontainer = {
	              		direction = vertical

				   		country_panel_law_item = {
				   			visible = "[Not(Law.IsBeingEnacted)]"
	                    	enabled = "[GreaterThan_int32(Law.GetGroup.GetNumImposeOptions( Country.Self ), '(int32)0')]"
	                 	}

	                 	country_panel_law_item_is_enacting = {
	                 		visible = "[Law.IsBeingEnacted]"
	                 	}
	              	}
				}

				background = {
					using = light_bg
					alpha = 0.5
					margin = { 5 0 }

					modify_texture = {
						texture = "gfx/interface/masks/fade_vertical_center.dds"
						spriteType = Corneredstretched
						blend_mode = alphamultiply
					}
				}
			}

			vertical_divider_full = {}

			flowcontainer = {
				direction = vertical
				visible = "[Not(IsDataModelEmpty(Country.AccessActiveHumanRightsLaws))]"
				datamodel = "[Country.AccessActiveHumanRightsLaws]"
				spacing = 5

				item = {
	              	flowcontainer = {
	              		direction = vertical

				   		country_panel_law_item = {
				   			visible = "[Not(Law.IsBeingEnacted)]"
	                    	enabled = "[GreaterThan_int32(Law.GetGroup.GetNumImposeOptions( Country.Self ), '(int32)0')]"
	                 	}

	                 	country_panel_law_item_is_enacting = {
	                 		visible = "[Law.IsBeingEnacted]"
	                 	}
	              	}
				}
			}
		}

		# NVGM 助成
		widget = {
			size = { 5 5 }
		}
		section_header_button = {
			blockoverride "layout" {
				parentanchor = hcenter
				size = { @panel_width_minus_10 38 }
			}

			blockoverride "left_text" {
				raw_text = "NVGM_SUBSIDIES"
				fontsize_min = 12
				elide = right
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle( Concatenate('show_buildings_', Country.GetIDString) )]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists( Concatenate('show_buildings_', Country.GetIDString) ))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists( Concatenate('show_buildings_', Country.GetIDString) )]"
			}
		}
		widget = {
			size = { 5 5 }
		}
		flowcontainer = {
			visible = "[GetVariableSystem.Exists( Concatenate('show_buildings_', Country.GetIDString) )]"
			parentanchor = hcenter
			direction = horizontal
			spacing = 5
			# 農業
			flowcontainer = {
				direction = vertical
				spacing = 5
				default_header = {
					parentanchor = hcenter
					blockoverride "size" {
						size =  { 170 40 }
					}
					blockoverride "text" {
						text = NVGM_FARMING
					}
				}
				# 助成 ライ麦畑 小麦畑 稲田
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_rye_farm_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_rye_farm_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/rye_farm.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_wheat_farm_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_wheat_farm_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/wheat_farm.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						direction = vertical
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_rice_farm_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_rice_farm_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/rice_farm.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
				# 助成 トウモロコシ畑 キビ畑 家畜牧場
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_maize_farm_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_maize_farm_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/maize_farm.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_millet_farm_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_millet_farm_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/millet_farm.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_livestock_ranch_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_livestock_ranch_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/cattle_ranch.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
				# 助成 コーヒー農園 綿花農園 染料農園
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_coffee_plantation_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_coffee_plantation_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/coffee_plantation.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_cotton_plantation_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_cotton_plantation_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/cotton_plantation.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_dye_plantation_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_dye_plantation_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/dye_plantation.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
				# 助成 アヘン農園 茶園 タバコ農園
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_opium_plantation_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_opium_plantation_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/opium_plantation.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_tea_plantation_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_tea_plantation_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/tea_plantation.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_tobacco_plantation_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_tobacco_plantation_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/tobacco_plantation.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
				# 助成 砂糖農園 バナナ農園 養蚕農園
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_sugar_plantation_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_sugar_plantation_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/sugar_plantation.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_banana_plantation_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_banana_plantation_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/banana_plantation.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_silk_plantation_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_silk_plantation_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/silk_plantation.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
				# 助成 ブドウ園
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_vineyard_plantation_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_vineyard_plantation_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/vineyards.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
			}
			vertical_divider_full = {}
			# 資源
			flowcontainer = {
				direction = vertical
				spacing = 5
				default_header = {
					parentanchor = hcenter
					blockoverride "size" {
						size =  { 170 40 }
					}
					blockoverride "text" {
						text = NVGM_RESOURCE
					}
				}
				# 助成 石炭鉱山 鉄鉱山 鉛鉱山
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_coal_mine_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_coal_mine_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/coal_mine.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_iron_mine_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_iron_mine_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/iron_mine.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_lead_mine_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_lead_mine_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/lead_mine.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
				# 助成 硫黄鉱山 金鉱山 採金地
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_sulfur_mine_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_sulfur_mine_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/sulfur_mine.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_gold_mine_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_gold_mine_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/gold_mine.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_gold_fields_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_gold_fields_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/gold_fields.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
				# 助成 伐採所 ゴム農園 漁港
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_logging_camp_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_logging_camp_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/logging_camp.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_rubber_plantation_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_rubber_plantation_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/rubber_lodge.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_fishing_wharf_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_fishing_wharf_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/fishing_wharf.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
				# 助成 捕鯨基地 石油リグ
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_whaling_station_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_whaling_station_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/whaling_station.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_oil_rig_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_oil_rig_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/oil_rig.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
			}
			vertical_divider_full = {}
			# 工業
			flowcontainer = {
				direction = vertical
				spacing = 5
				default_header = {
					parentanchor = hcenter
					blockoverride "size" {
						size =  { 170 40 }
					}
					blockoverride "text" {
						text = NVGM_INDUSTRIES
					}
				}
				# 助成 食品工場 織物工場 家具工場
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_food_industry_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_food_industry_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/food_industry.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_textile_industry_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_textile_industry_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/textile_industry.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						direction = vertical
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_furniture_manufacturies_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_furniture_manufacturies_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/furniture_manufacturies.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
				# 助成 ガラス工房 工具工房 製紙工場
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_glassworks_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_glassworks_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/glassworks.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_tooling_workshops_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_tooling_workshops_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/tooling_workshops.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_paper_mills_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_paper_mills_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/paper_mills.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
				# 助成 肥料工場 爆薬工場 合成繊維プラント
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_chemicals_industry_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_chemicals_industry_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/chemicals_industry.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_explosives_factory_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_explosives_factory_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/explosives_factory.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_synthetics_plants_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_synthetics_plants_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/synthetics_plants.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
				# 助成 製鉄所 発動機産業 造船所
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_steel_mills_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_steel_mills_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/steel_mills.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_motor_industry_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_motor_industry_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/motor_industry.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_shipyards_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_shipyards_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/shipyards.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
				# 助成 軍用造船所 戦争兵器産業 電気産業
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_military_shipyards_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_military_shipyards_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/military_shipyards.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_vehicles_industry_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_vehicles_industry_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/vehicles_industry.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_electrics_industry_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_electrics_industry_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/electrics_industry.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
				# 助成 武器工場 大砲工場 弾薬工場
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_arms_industry_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_arms_industry_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/arms_industry.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_artillery_foundry_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_artillery_foundry_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/artillery_foundry.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_munition_plants_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_munition_plants_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/munition_plants.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
				# 助成 市街地 芸術院 発電所
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_urban_center_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_urban_center_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/urban_center.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_arts_academy_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_arts_academy_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/building_arts_academy.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_power_plant_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_power_plant_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/power_plant.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
				# 助成 鉄道 病院
				flowcontainer = {
					direction = horizontal
					parentanchor = left
					spacing = 2.5
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_railway_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_railway_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/building_railway.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
					flowcontainer = {
						button = {
							using = default_button
							size = { 55 55 }
							name = "host_button"
							using = select_button_sound
							datacontext = "[GetScriptedGui('nvgm_subsidized_nvgm_clinic_scriptedgui')]"
							visible = "[GetScriptedGui('nvgm_subsidized_nvgm_clinic_scriptedgui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
							tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( Country.MakeScope ).End)]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
							icon = {
								size = { 40 40 }
								texture = "gfx/interface/icons/building_icons/building_nvgm_clinic.dds"
								parentanchor = vcenter|hcenter
							}
						}
					}
				}
			}
		}
		# NVGM

		# NVGM 国の詳細
		widget = {
			size = { 5 5 }
		}
		section_header_button = {
			blockoverride "layout" {
				parentanchor = hcenter
				size = { @panel_width_minus_10 38 }
			}

			blockoverride "left_text" {
				raw_text = "NVGM_COUNTRY_DETAILS"
				fontsize_min = 12
				elide = right
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle( Concatenate('show_country_details_', Country.GetIDString) )]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists( Concatenate('show_country_details_', Country.GetIDString) ))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists( Concatenate('show_country_details_', Country.GetIDString) )]"
			}
		}
		widget = {
			size = { 5 5 }
		}
		flowcontainer = {
			visible = "[GetVariableSystem.Exists( Concatenate('show_country_details_', Country.GetIDString) )]"
			parentanchor = hcenter
			direction = vertical
			spacing = 5
			# 政体
			flowcontainer = {
				parentanchor = hcenter
				direction = vertical
				minimumsize = { 520 -1 }
				margin = { 0 10 }
				spacing = 10	
				
				using = main_bg
	
				background = {
					texture = "gfx/interface/illustrations/government/government_illustration.dds"
					alpha = 0.2
					fittype = center
					using = frame_small_mask
					
					modify_texture = {
						texture = "gfx/interface/masks/fade_horizontal_center.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
					}
				}
				
				textbox = {
					parentanchor = hcenter
					autoresize = yes
					size = { @panel_width 30 }
					text = "COUNTRY_GOVERNMENT_NO_LINE_BREAK"
					align = nobaseline
					elide = right
					using = fontsize_xl
				}
	
				flowcontainer = {
					spacing = 5
					parentanchor = hcenter
				
					### government					
					flowcontainer = {
						direction = vertical
						spacing = 5
						
						widget = {
							size = { 250 30 }
							parentanchor = hcenter
							
							background = {
								using = dark_area
								alpha = 0.35
							}
							
							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5
								margin = { 10 0 }
							
								icon = {
									texture = "gfx/interface/icons/generic_icons/in_government_icon.dds"
									size = { 25 25 }
									tooltip = "[concept_in_government]"
								}	
								textbox = {
									layoutpolicy_horizontal = expanding
									text = "GOVERNMENT"
									align = left|nobaseline
									elide = right
									default_format = "#title"
								}
							}
						}
					
						fixedgridbox = {
							parentanchor = left
							datamodel = "[Country.AccessInterestGroupsInGovernment]"
							datamodel_wrap = 4
							addcolumn = 65
							addrow = 65
							flipdirection = yes
							
							item = {
								widget = {
									size = { 65 65 }
									
									flowcontainer = {
										parentanchor = bottom
										margin_left = 25
										direction = vertical
										tooltip = "CLOUT_PIECHART"
										
										widget = {
											size = { 36 36 }
											parentanchor = hcenter
											
											ig_button = {
												size = { 100% 100% }
												blockoverride "in_government_icon"{}
											}
										}
										textbox = {
											text = "[InterestGroup.GetClout|%1]"
											autoresize = yes
											parentanchor = hcenter
										}
									}
								}
							}
						}
					}
				
					vertical_divider_full = {}
				
					### opposition
					flowcontainer = {
						direction = vertical
						spacing = 5
						
						widget = {
							size = { 250 30 }
							parentanchor = hcenter
							
							background = {
								using = dark_area
								alpha = 0.35
							}
							
							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5
								margin = { 10 0 }
							
								icon = {
									texture = "gfx/interface/icons/generic_icons/in_opposition_icon.dds"
									size = { 25 25 }
									tooltip = "[concept_in_opposition]"
								}	
								textbox = {
									layoutpolicy_horizontal = expanding
									text = "OPPOSITION"
									align = left|nobaseline
									elide = right
									default_format = "#title"
								}
							}
						}
						
						fixedgridbox = {
							parentanchor = left
							datamodel = "[Country.AccessInterestGroupsInOpposition]"
							datamodel_wrap = 4
							addcolumn = 65
							addrow = 65
							flipdirection = yes
							
							item = {
								widget = {
									size = { 65 65 }
									
									flowcontainer = {
										parentanchor = bottom
										margin_left = 25
										direction = vertical
										tooltip = "CLOUT_PIECHART"
										
										widget = {
											size = { 36 36 }
											parentanchor = hcenter
											
											ig_button = {
												size = { 100% 100% }
												blockoverride "in_government_icon"{}
											}
										}
										textbox = {
											text = "[InterestGroup.GetClout|%1]"
											autoresize = yes
											parentanchor = hcenter
										}
									}
								}
							}
						}
					}
				}	
			}
			empty_state = {
				blockoverride "visible" {
					visible = "[IsDataModelEmpty(Country.AccessInstitutions)]"
				}
				blockoverride "text" {
					text = "NO_INSTITUTIONS"
				}
			}
			widget = {
				size = { 10 5 }
			}
			# 施設
			default_header = {
				parentanchor = hcenter
				blockoverride "size" {
					size =  { 500 40 }
				}
				blockoverride "text" {
					text = INSTITUTIONS
				}
			}
			flowcontainer = {
				direction = vertical
				visible = "[Not(IsDataModelEmpty(Country.AccessInstitutions))]"
				datamodel = "[Country.AccessInstitutions]"
				parentanchor = hcenter
				spacing = 5
				item = {
					country_panel_institution_item = {
						size = { 500 40 }
					}
				}
			}
			empty_state = {
				blockoverride "visible" {
					visible = "[IsDataModelEmpty(Country.AccessInstitutions)]"
				}
				blockoverride "text" {
					text = "NO_INSTITUTIONS"
				}
			}	
			# 企業
			default_header = {
				parentanchor = hcenter
				blockoverride "size" {
					size =  { 500 40 }
				}
				blockoverride "text" {
					text = COMPANIES
				}
			}
			fixedgridbox = {
				datamodel = "[Country.GetCompanies]"
				parentanchor = hcenter
				addrow = 100
				addcolumn = 250
				datamodel_wrap = 2
				flipdirection = yes
				item = {
					flowcontainer = {
						spacing = 10
						minimumsize = { 250 100 }
						maximumsize = { 250 100 }
						margin = { 10 10 }
						tooltipwidget = {
							FancyTooltip_Company = {}
						}
						background = {
							using = entry_bg_simple
						}
						icon = {
							size = { 80 80 }
							texture = "[Company.GetCompanyType.GetIcon]"
	
						}
						textbox = {
							text = "[Company.GetName]"
							maximumsize = { 140 80 }
							multiline = yes
							parentanchor = vcenter
							align = nobaseline
							autoresize = yes
							using = fontsize_large
							fontsize_min = 12
						}
					}
				}
			}
			empty_state = {
				blockoverride "visible" {
					visible = "[IsDataModelEmpty(Country.GetCompanies)]"
				}
				blockoverride "text" {
					text = "NO_COMPANIES"
				}
			}
			# 挙動
			default_header = {
				parentanchor = hcenter
				blockoverride "size" {
					size =  { 500 40 }
				}
				blockoverride "text" {
					text = BEHAVIOR
				}
			}
			flowcontainer = {
				parentanchor = hcenter
				margin_top = 10
				margin_bottom = 10
				# ATTITUDE / INFAMY
				flowcontainer = {
					direction = vertical
					minimumsize = { 250 -1 }
					spacing = 10
	
					# ATTITUDE
					flowcontainer = {
						visible = "[And(Not(Country.IsColonizable), Not(Country.IsLocalPlayer))]"
						spacing = 10
						margin_left = 10
	
						textbox = {
							parentanchor = vcenter
							autoresize = yes
							align = nobaseline
							minimumsize = { 70 -1 }
							maximumsize = { 70 -1 }
							fontsize_min = 12
							elide = right
							text = "ATTITUDE"
						}
	
						widget = {
							size = { 45 45 }
	
							block "context" {
								datacontext = "[CountryPanel.GetCountry]"
							}
	
							icon = {
								size = { 100% 100% }
								texture = "gfx/interface/icons/ai_attitude_icons/human.dds"
								visible = "[Country.IsPlayer]"
								tooltip = "ai_attitude_human_tooltip"
							}
	
							icon = {
								size = { 100% 100% }
								texture = "[Country.GetAttitudeTowards(GetPlayer).GetTexture]"
								visible = "[Not(Country.IsPlayer)]"
								tooltip = "[Country.GetAttitudeTowards(GetPlayer).GetTooltip]"
							}
						}
	
						textbox = {
							visible = "[Country.IsPlayer]"
							parentanchor = vcenter
							align = nobaseline
							autoresize = yes
							max_width = 130
							fontsize_min = 12
							elide = right
							text = "ai_attitude_human"
							tooltip = "ai_attitude_human_tooltip"
						}
	
						textbox = {
							visible = "[Not(Country.IsPlayer)]"
							parentanchor = vcenter
							align = nobaseline
							autoresize = yes
							max_width = 130
							fontsize_min = 12
							elide = right
							text = "[Country.GetAttitudeTowards(GetPlayer).GetName]"
							tooltip = "[Country.GetAttitudeTowards(GetPlayer).GetTooltip]"
						}
					}
	
					divider_clean = {
						blockoverride "size" {
							size =  { 230 2 }
						}
					}
	
					# TENSION
					flowcontainer = {
						visible = "[Country.IsColonizable]"
						spacing = 10
						tooltip = "[GetPlayer.GetTensionTooltip( Country.Self )]"
	
						textbox = {
							parentanchor = vcenter
							minimumsize = { 70 -1 }
							maximumsize = { 70 -1 }
							autoresize = yes
							align = nobaseline
							default_format = "#title"
							fontsize_min = 12
							elide = right
							text = "TENSION"
						}
	
						icon = {
							size = { 45 45 }
							texture = "[GetPlayer.GetTensionIconTexture( Country.Self )]"
						}
	
						textbox = {
							parentanchor = vcenter
							autoresize = yes
							align = nobaseline
							max_width = 130
							fontsize_min = 12
							elide = right
							raw_text = "#BOLD [Country.GetTensionWithDesc( GetPlayer )]#!"
						}
					}
	
					# RELATIONS
					flowcontainer = {
						spacing = 10
						margin_left = 10
						name = "tutorial_highlight_country_diplomacy_tab_relations"
						tooltip = "COUNTRY_RELATIONS_TOOLTIP"
						visible = "[And(Not(Country.IsColonizable),Not(Country.IsLocalPlayer))]"
	
						textbox = {
							parentanchor = vcenter
							minimumsize = { 70 -1 }
							maximumsize = { 70 -1 }
							autoresize = yes
							align = nobaseline
							default_format = "#title"
							fontsize_min = 12
							elide = right
							text = "RELATIONS"
						}
	
						icon = {
							size = { 45 45 }
							texture = "[GetPlayer.GetRelationsIconTexture( Country.Self )]"
						}
	
						textbox = {
							parentanchor = vcenter
							autoresize = yes
							align = nobaseline
							max_width = 130
							fontsize_min = 12
							elide = right
							raw_text = "#BOLD [Country.GetRelationsWithDesc( GetPlayer )]#!"
						}
					}
	
					divider_clean = {
						blockoverride "size" {
							size =  { 230 2 }
						}
					}
	
					# INFAMY
					flowcontainer = {
						spacing = 10
						margin_left = 10
						tooltip = "[Country.GetInfamyDesc]"
						visible = "[Not(Country.IsColonizable)]"
						onmousehierarchyenter = "[SetTempMapModeByKey('mm_infamy')]"
						onmousehierarchyleave = "[RemoveTempMapMode]"
						alwaystransparent = no
	
						textbox = {
							parentanchor = vcenter
							minimumsize = { 70 -1 }
							maximumsize = { 70 -1 }
							autoresize = yes
							align = nobaseline
							default_format = "#title"
							fontsize_min = 12
							elide = right
							text = "INFAMY"
						}
	
						icon = {
							size = { 45 45 }
							texture = "[Country.GetInfamyIconTexture]"
						}
	
						textbox = {
							parentanchor = vcenter
							autoresize = yes
							align = nobaseline
							max_width = 130
							fontsize_min = 12
							elide = right
							raw_text = "#BOLD [Country.GetInfamyLabel|-]#!"
						}
					}
	
					divider_clean = {
						blockoverride "size" {
							size =  { 230 2 }
						}
					}
				}
				vertical_divider = {
					parentanchor = vcenter
					using = is_not_player_and_not_colonizable_country
	
					blockoverride "size" {
						size = { 2 120% }
					}
				}
				# AI STRATEGIES
				flowcontainer = {
					using = is_not_player_and_not_colonizable_country
					datamodel = "[Country.AccessStrategies]"
					direction = vertical
					margin_left = 10
					spacing = 10
					item = {
						flowcontainer = {
							direction = vertical
							minimumsize = { 250 -1 }
							spacing = 10
							flowcontainer = {
								tooltip = "[AIStrategy.GetTooltip(Country.Self)]"
								spacing = 10
	
								widget = {
									parentanchor = vcenter
									size = { 45 45 }
	
									icon = {
										size = { 100% 100% }
										texture = "gfx/interface/backgrounds/round_frame_dec.dds"
									}
									icon = {
										size = { 75% 75% }
										texture = "[AIStrategy.GetTexture]"
										parentanchor = center
									}
								}
	
								textbox = {
									parentanchor = vcenter
									autoresize = yes
									text = "[AIStrategy.GetName]"
									align = nobaseline
									maximumsize = { 200 -1 }
									elide = right
									fontsize_min = 12
								}
							}
							divider_clean = {
								blockoverride "size" {
									size =  { 230 2 }
								}
							}
						}
					}
				}
			}
			empty_state = {
				blockoverride "visible" {
					visible = "[Not(Country.HasActiveDiplomacy)]"
				}
				blockoverride "text" {
					text = "NO_ACTIVE_DIPLOMACY"
				}
			}
		}
		# NVGM
	}

	type release_subject_tab_content = container {
		minimumsize = { @panel_width_plus_20 -1 }
		maximumsize = { @panel_width_plus_20 -1 }
		using = default_content_fade
		
		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(AccessPlayer.AccessReleasableCountries)]"
			}
			blockoverride "text" {
				text = "NO_RELEASABLE_COUNTRIES"
			}
		}	
		
		flowcontainer = {
			parentanchor = hcenter
			direction = vertical
			visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessReleasableCountries))]"		
			spacing = 10

			default_header = {
				blockoverride = "text" {
					text = "RELEASABLE_COUNTRIES"
				}
			}

			flowcontainer = {
				parentanchor = hcenter
				direction = vertical
				datamodel = "[AccessPlayer.AccessReleasableCountries]"
				spacing = 5
			
				item = {
					releasable_country_button = {}
				}
			}	
		}			
	}

	type releasable_country_button = container {
		datacontext = "[CountryCreation.GetDefinition]"
		onmousehierarchyenter = "[AccessHighlightManager.HighlightCountryCreation(CountryCreation.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		alwaystransparent = no

		country_button = {
			enabled = "[CountryCreation.CanReleaseCountry(GetPlayer)]"
			onclick = "[PopupManager.ShowReleaseCountryConfirmation(CountryCreation.Self)]"
			tooltip = "RELEASE_COUNTRY_TOOLTIP"


			blockoverride "country_name" {
				text = "RELEASE_COUNTRY_NAME"
			}
			
			blockoverride "country_tier" {
				text = "RELEASE_COUNTRY_TIER"
			}
			

			blockoverride "flag_definition" {
				# Using medium size textures in small flag for better downscaling of flag details
				texture = "[CountryDefinition.GetFlag('release').GetMediumFlagTexture]"
				frame = "[CountryDefinition.GetFlag('release').GetMediumFlagFrame]"
				framesize = "[GetMediumFlagFrameSize]"
			}

			blockoverride "right_number" {
				visible = "[Not(CountryCreation.ShowRequiredNumStates(GetPlayer))]"
				text = "RELEASE_COUNTRY_NUM_STATES"
			}

			blockoverride "right_number_two" {
				visible = "[CountryCreation.ShowRequiredNumStates(GetPlayer)]"
				text = "RELEASE_COUNTRY_REQ_STATES"
			}
		}
	}

	type country_browser_tab_content = flowcontainer {
		margin_top = 10
		using = default_list_position
		direction = vertical
		minimumsize = { @panel_width -1 }
		maximumsize = { @panel_width -1 }
		datacontext = "[GetPlayer]"

		widget = {
			size = { @panel_width 30 }
			
			hbox = {
				
				sort_button = {
					size = { 40 30 }
					onclick = "[DiplomaticOverviewPanel.Sort('rank')]"
					button = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_rank.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}

					tooltip = "SORT_BY_RANK"
				}

				sort_button = {
					layoutstretchfactor_horizontal = 4
					layoutpolicy_horizontal = preferred
					size = { 0 30 }
					text = "COUNTRY_TITLE"
					onclick = "[DiplomaticOverviewPanel.Sort('name')]"
				}

				sort_button = {
					visible = "[DiplomaticOverviewPanel.IsShowingRelations]"
					layoutstretchfactor_horizontal = 2
					layoutpolicy_horizontal = preferred
					size = { 0 30 }
					text = "RELATIONS"
					onclick = "[DiplomaticOverviewPanel.Sort('relations')]"
				}

				sort_button = {
					visible = "[DiplomaticOverviewPanel.IsShowingAttitude]"
					layoutstretchfactor_horizontal = 2
					layoutpolicy_horizontal = preferred
					size = { 0 30 }
					text = "ATTITUDE"
					onclick = "[DiplomaticOverviewPanel.Sort('attitude')]"
				}

				sort_button = {
					layoutstretchfactor_horizontal = 1
					layoutpolicy_horizontal = preferred
					size = { 0 30 }
					text = "INFAMY"
					onclick = "[DiplomaticOverviewPanel.Sort('infamy')]"
				}
			}
		}		
		
		flowcontainer = {
			datamodel = "[DiplomaticOverviewPanel.GetCountries]"
			minimumsize = { @panel_width -1 }
			maximumsize = { @panel_width -1 }
			direction = vertical
			margin_top = 5
			
			item = {
				widget = {
					size = { @panel_width 35 }
					name = "tutorial_highlight_country"
					
					divider_clean = {
						parentanchor = bottom
						position = { 0 2 }
					}
			
					hbox = {
						spacing = 10

						background = {
							visible = "[Country.IsLocalPlayer]"
							using = paper_bg
						}

						widget = {
							size = { 50 40 }
							alwaystransparent = no
							tooltip = "[Country.GetRankTooltip]"

							rank_badge = {
								size = { 40 40 }
								
								blockoverride "datacontext " { 
									datacontext = "[Country]"
								}

								blockoverride "rank_text" {
									raw_text = "#BOLD [Country.GetCountryScorePositionDesc]"
								}
								blockoverride "rank_text_2" {
									raw_text = "#BOLD [Country.GetCountryScorePositionDesc]"
									visible = no
								}
							}
						}

						hbox = {
							layoutstretchfactor_horizontal = 4
							layoutpolicy_horizontal = preferred
							size = { 0 30 }
							spacing = 10
							
							tiny_flag = {}

							button = {
								using = clean_button
								layoutpolicy_horizontal = preferred
								size = { 0 30 }
								
								onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"
									
								textbox = {
									text = "[Country.GetNameNoFlag]"
									size = { 100% 100% }
									elide = right
									align = nobaseline
									parentanchor = vcenter
									alwaystransparent = yes
									margin_left = 12
								}
							}
						}

						textbox = {
							visible = "[And(DiplomaticOverviewPanel.IsShowingRelations, Not(Country.IsLocalPlayer))]"
							layoutstretchfactor_horizontal = 2
							layoutpolicy_horizontal = preferred
							size = { 0 30 }
							text = "[Country.GetRelationsWithDesc( GetPlayer )|+]"
							elide = right
							align = nobaseline
							tooltip = "[GetPlayer.GetRelationsTooltip( Country.Self )]"
						}

						textbox = {
							visible = "[And(DiplomaticOverviewPanel.IsShowingAttitude, Not(Country.IsLocalPlayer))]"
							layoutstretchfactor_horizontal = 2
							layoutpolicy_horizontal = preferred
							size = { 0 30 }
							text = "[Country.GetAttitudeTowards(GetPlayer).GetName]"
							tooltip = "[Country.GetAttitudeTowards(GetPlayer).GetTooltip]"
							elide = right
							align = nobaseline
						}

						textbox = {
							visible = "[Country.IsLocalPlayer]"
							layoutstretchfactor_horizontal = 2
							layoutpolicy_horizontal = preferred
							size = { 0 30 }
							text = "YOU"
							elide = right
							align = nobaseline
						}

						textbox = {
							layoutstretchfactor_horizontal = 1
							layoutpolicy_horizontal = preferred
							size = { 0 30 }
							raw_text = "#v [Country.GetInfamy|-1]#!"
							elide = right
							align = right|nobaseline
							tooltip = "[Country.GetInfamyDesc]"
							margin_right = 10
							alpha = "[TransparentIfZero(Country.GetInfamy)]"
						}
					}
				}
			}
		}	
	}
	
}
